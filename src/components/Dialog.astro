---
import { Icon } from "astro-icon/components"

export interface Props extends Omit<astroHTML.JSX.DialogHTMLAttributes, "class"> {
	part: string
	play: string
	author: string
	class?: string
}
const { part, play, author, class: classList, ...attrs } = Astro.props
---

<dialog
	class:list={["bg-transparent backdrop:bg-neutral-950/70", classList]}
	{...attrs}
	aria-label={part}>
	<div id="div_dialog" class="relative grid rounded-sm bg-neutral-50 p-4">
		<slot />
		<footer class="space-y-1.5 bg-neutral-50 pt-4">
			<h3 class="font-josefin text-xl font-medium">{part}</h3>
			<div class="">{play}</div>
			<div class="text-sm">Written by {author}</div>
		</footer>
		<button
			id="dialogClose"
			class="absolute -top-3 right-1 col-start-1 row-start-1 rounded-full border-4 border-neutral-800 bg-neutral-50/75 p-2 text-neutral-800 outline-none hover:bg-neutral-50 hover:text-neutral-700 focus-visible:ring-2 focus-visible:ring-sky-600 focus-visible:ring-offset-4 focus-visible:ring-offset-neutral-100">
			<span class="sr-only">Close</span>
			<Icon class="size-6" aria-hidden="true" name="mdi:close" />
		</button>
	</div>
</dialog>

<style>
	:root {
		--opening-duration: 0.4s;
	}

	dialog[open] {
		opacity: 1;
		transform: scale(1);
	}

	dialog {
		opacity: 0;
		transform: scale(0);
		transition:
			opacity var(--opening-duration) ease-out,
			transform var(--opening-duration) ease-out,
			overlay var(--opening-duration) ease-out allow-discrete,
			display var(--opening-duration) ease-out allow-discrete;
	}

	@starting-style {
		dialog[open] {
			opacity: 0;
			transform: scale(0);
		}
	}

	dialog::backdrop {
		opacity: 0;
		transition:
			opacity var(--opening-duration) ease-out,
			overlay var(--opening-duration) ease-out allow-discrete,
			display var(--opening-duration) ease-out allow-discrete;
	}

	dialog[open]::backdrop {
		opacity: 1;
	}

	@starting-style {
		dialog[open]::backdrop {
			opacity: 0;
		}
	}
</style>

<script>
	const dialogs = document.getElementsByTagName("dialog")
	if (dialogs && dialogs.length > 0) {
		for (const dialog of dialogs) {
			dialog.addEventListener("click", () => {
				dialog.close()
			})

			dialog.firstElementChild?.addEventListener("click", (e) => {
				e.stopPropagation()
			})

			const dialogClose = dialog.querySelector("#dialogClose")
			dialogClose!.addEventListener("click", () => {
				dialog.close()
			})
		}
	}
</script>
