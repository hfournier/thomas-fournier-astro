---
import { Icon } from "astro-icon/components"
import type { HTMLAttributes } from "astro/types"
import type { CollectionEntry } from "astro:content"

export interface Props extends HTMLAttributes<"dialog"> {
	item: CollectionEntry<"gallery"> & {
		lowresSrc: string
	}
}
const { item, class: classList, ...attrs } = Astro.props
---

<dialog
	class:list={[
		"m-auto max-h-[90dvh] max-w-[90dvw] overflow-visible bg-transparent backdrop:bg-neutral-950/70",
		classList
	]}
	id={`dlg_${item.id}`}
	popover
	{...attrs}
	aria-label={item.data.role}
>
	<div id="div_dialog" class="scrollable grid max-w-fit rounded-xs bg-neutral-50 p-4">
		<button
			class="absolute top-0 right-0 col-start-1 row-start-1 translate-x-1/2 -translate-y-1/2 rounded-full border-4 border-neutral-800 bg-neutral-100 p-2 text-neutral-800 outline-hidden transition-transform hover:scale-105 hover:bg-white hover:text-neutral-700 focus-visible:ring-2 focus-visible:ring-sky-600 focus-visible:ring-offset-4 focus-visible:ring-offset-neutral-100"
			popovertarget={`dlg_${item.id}`}
			popovertargetaction="hide"
		>
			<span class="sr-only">Close</span>
			<Icon class="size-6" aria-hidden="true" name="mdi:close" />
		</button>
		<!-- Image here -->
		<div
			class="h-full max-h-[63dvh] w-full bg-neutral-50 object-scale-down"
			style={`background-image: url(${item.lowresSrc}); background-repeat: no-repeat; background-size: cover`}
		>
			<slot />
		</div>
		<footer class="flex">
			<div class="w-0 min-w-0 grow space-y-1.5 bg-neutral-50 pt-4">
				<h3 class="font-josefin text-xl font-medium">{item.data.role}</h3>
				<div class="text-base font-medium">{item.data.play}</div>
				{item.data.author && <div class="text-sm">Written by {item.data.author}</div>}
				{item.data.credit && <div class="text-sm">Photo credit: {item.data.credit}</div>}
				{item.data.attribution && <p class="text-sm">{item.data.attribution}</p>}
			</div>
		</footer>
	</div>
</dialog>

<style>
	:root {
		--opening-duration: 0.4s;
	}

	dialog:popover-open {
		opacity: 1;
		transform: scale(1);
	}

	dialog {
		opacity: 0;
		transform: scale(0);
		transition:
			opacity var(--opening-duration) ease-out,
			transform var(--opening-duration) ease-out,
			overlay var(--opening-duration) ease-out allow-discrete,
			display var(--opening-duration) ease-out allow-discrete;
	}

	@starting-style {
		dialog:popover-open {
			opacity: 0;
			transform: scale(0);
		}
	}

	dialog::backdrop {
		opacity: 0;
		transition:
			opacity var(--opening-duration) ease-out,
			overlay var(--opening-duration) ease-out allow-discrete,
			display var(--opening-duration) ease-out allow-discrete;
	}

	dialog:popover-open::backdrop {
		opacity: 1;
	}

	@starting-style {
		dialog:popover-open::backdrop {
			opacity: 0;
		}
	}
</style>

<script>
	const dialogs = document.getElementsByTagName("dialog")
	if (dialogs && dialogs.length > 0) {
		for (const dialog of dialogs) {
			// @ts-ignore
			let player

			const video = dialog.querySelector("lite-youtube")
			if (video) {
				dialog.addEventListener("beforetoggle", async (event) => {
					// check if inner script tags exist (player loaded), before calling getYTPlayer()
					const activated = video.classList.contains("lyt-activated")
					if (activated) {
						// @ts-ignore
						if (!player) {
							// @ts-ignore
							player = await video.getYTPlayer()
						}
						if (player) {
							const playerState = player.getPlayerState()
							if ((event as ToggleEvent).newState === "open") {
								// if player was paused(2), play
								if (playerState === 2) {
									player?.playVideo()
								}
							} else {
								// if player is playing(1) or buffering(3), pause
								if (playerState === 1 || playerState === 3) {
									player?.pauseVideo()
								}
							}
						}
					}
				})
			}
		}
	}
</script>
